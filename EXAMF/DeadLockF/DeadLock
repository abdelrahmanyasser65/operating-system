// DeadLock
#include<stdio.h>
#include<pthread.h>
#include<unistd.h>
void *fun1();
void *fun2();
pthread_mutex_t first_mutex;
pthread_mutex_t second_mutex;

int main(){
pthread_mutex_init(&first_mutex,NULL);
pthread_mutex_init(&second_mutex,NULL);
pthread_t one,two;
pthread_create(&one,NULL,fun1(),NULL);
pthread_create(&two,NULL,fun2(),NULL);
pthread_join(one,NULL);
pthread_join(two,NULL);
printf("Thread Joined\n");
}

void*fun1(){

pthread_mutex_lock(&first_mutex);
printf("T1 acquired first mutex\n");
sleep(1);
pthread_mutex_lock(&second_mutex);
printf("T1 acquired second mutex\n");
pthread_mutex_unlock(&second_mutex);
printf("T1 released second mutex\n");
pthread_mutex_unlock(&first_mutex);
printf("T1 released first mutes\n");
}

void *fun2(){
pthread_mutex_lock(&second_mutex);
printf("T2 acquired second mutex\n");
sleep(1);
pthread_mutex_lock(&first_mutex);
printf("T2 acquired first mutex\n");
pthread_mutex_unlock(&first_mutex);
printf("T2 released first mutex\n");
pthread_mutex_unlock(&second_mutex);
printf("T2 released second mutex\n");
}